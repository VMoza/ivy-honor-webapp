-- Create colleges table
CREATE TABLE IF NOT EXISTS public.colleges (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    priority TEXT NOT NULL,
    deadline TEXT NOT NULL,
    major TEXT NOT NULL,
    application_cost TEXT NOT NULL,
    attendance_cost TEXT NOT NULL,
    application_type TEXT NOT NULL,
    status TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Add RLS (Row Level Security) policies
ALTER TABLE public.colleges ENABLE ROW LEVEL SECURITY;

-- Create policy to allow users to select only their own colleges
CREATE POLICY "Users can view their own colleges"
    ON public.colleges
    FOR SELECT
    USING (auth.uid() = user_id);

-- Create policy to allow users to insert their own colleges
CREATE POLICY "Users can insert their own colleges"
    ON public.colleges
    FOR INSERT
    WITH CHECK (auth.uid() = user_id);

-- Create policy to allow users to update their own colleges
CREATE POLICY "Users can update their own colleges"
    ON public.colleges
    FOR UPDATE
    USING (auth.uid() = user_id);

-- Create policy to allow users to delete their own colleges
CREATE POLICY "Users can delete their own colleges"
    ON public.colleges
    FOR DELETE
    USING (auth.uid() = user_id);

-- Create index for faster queries
CREATE INDEX IF NOT EXISTS colleges_user_id_idx ON public.colleges (user_id);

-- Add function to update the updated_at timestamp
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add trigger to automatically update the updated_at column
CREATE TRIGGER update_colleges_updated_at
BEFORE UPDATE ON public.colleges
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column(); 